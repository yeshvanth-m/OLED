
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002704  08002704  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800270c  0800270c  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  08002714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000404  08002b18  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d04  08002b18  00020d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b25  00000000  00000000  00020477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001677  00000000  00000000  00026f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151d3  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084f7  00000000  00000000  0003debb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f97  00000000  00000000  000463b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000506  00000000  00000000  000ca349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a5c  00000000  00000000  000ca850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cc2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000404 	.word	0x20000404
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080026d4 	.word	0x080026d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000408 	.word	0x20000408
 80001d0:	080026d4 	.word	0x080026d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <populate_xfer_buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void populate_xfer_buffer(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	memset((void *)&led_transfer_buf[0], 0x00, sizeof(led_transfer_buf));
 80004d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004da:	2100      	movs	r1, #0
 80004dc:	482e      	ldr	r0, [pc, #184]	; (8000598 <populate_xfer_buffer+0xc8>)
 80004de:	f002 f8cd 	bl	800267c <memset>

	for (uint8_t page = 0; page < 8; page++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	e04f      	b.n	8000588 <populate_xfer_buffer+0xb8>
	{
		for (uint8_t col_byte = 0; col_byte < 16; col_byte++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	71bb      	strb	r3, [r7, #6]
 80004ec:	e046      	b.n	800057c <populate_xfer_buffer+0xac>
		{
			for (uint8_t bit = 0; bit < 8; bit++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	717b      	strb	r3, [r7, #5]
 80004f2:	e03d      	b.n	8000570 <populate_xfer_buffer+0xa0>
			{
				for (uint8_t pos = 0; pos < 8; pos++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	713b      	strb	r3, [r7, #4]
 80004f8:	e034      	b.n	8000564 <populate_xfer_buffer+0x94>
				{
					led_transfer_buf[(page * 128) + (col_byte * 8) + bit] |=
					((((led_data_buf[(page * 128) + col_byte + (pos * 16)]) & (1 << (7 - bit))) >> ((7 - bit))) << pos);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	01da      	lsls	r2, r3, #7
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	441a      	add	r2, r3
 8000502:	793b      	ldrb	r3, [r7, #4]
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	4413      	add	r3, r2
 8000508:	4a24      	ldr	r2, [pc, #144]	; (800059c <populate_xfer_buffer+0xcc>)
 800050a:	5cd3      	ldrb	r3, [r2, r3]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	797b      	ldrb	r3, [r7, #5]
 8000512:	f1c3 0307 	rsb	r3, r3, #7
 8000516:	2201      	movs	r2, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	ea01 0203 	and.w	r2, r1, r3
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	f1c3 0307 	rsb	r3, r3, #7
 8000526:	411a      	asrs	r2, r3
 8000528:	793b      	ldrb	r3, [r7, #4]
 800052a:	fa02 f103 	lsl.w	r1, r2, r3
					led_transfer_buf[(page * 128) + (col_byte * 8) + bit] |=
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	011a      	lsls	r2, r3, #4
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	4413      	add	r3, r2
 8000536:	00da      	lsls	r2, r3, #3
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	4413      	add	r3, r2
 800053c:	4a16      	ldr	r2, [pc, #88]	; (8000598 <populate_xfer_buffer+0xc8>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	b25a      	sxtb	r2, r3
 8000544:	b24b      	sxtb	r3, r1
 8000546:	4313      	orrs	r3, r2
 8000548:	b259      	sxtb	r1, r3
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	011a      	lsls	r2, r3, #4
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	4413      	add	r3, r2
 8000552:	00da      	lsls	r2, r3, #3
 8000554:	797b      	ldrb	r3, [r7, #5]
 8000556:	4413      	add	r3, r2
 8000558:	b2c9      	uxtb	r1, r1
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <populate_xfer_buffer+0xc8>)
 800055c:	54d1      	strb	r1, [r2, r3]
				for (uint8_t pos = 0; pos < 8; pos++)
 800055e:	793b      	ldrb	r3, [r7, #4]
 8000560:	3301      	adds	r3, #1
 8000562:	713b      	strb	r3, [r7, #4]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	2b07      	cmp	r3, #7
 8000568:	d9c7      	bls.n	80004fa <populate_xfer_buffer+0x2a>
			for (uint8_t bit = 0; bit < 8; bit++)
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	3301      	adds	r3, #1
 800056e:	717b      	strb	r3, [r7, #5]
 8000570:	797b      	ldrb	r3, [r7, #5]
 8000572:	2b07      	cmp	r3, #7
 8000574:	d9be      	bls.n	80004f4 <populate_xfer_buffer+0x24>
		for (uint8_t col_byte = 0; col_byte < 16; col_byte++)
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	3301      	adds	r3, #1
 800057a:	71bb      	strb	r3, [r7, #6]
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	2b0f      	cmp	r3, #15
 8000580:	d9b5      	bls.n	80004ee <populate_xfer_buffer+0x1e>
	for (uint8_t page = 0; page < 8; page++)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	3301      	adds	r3, #1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b07      	cmp	r3, #7
 800058c:	d9ac      	bls.n	80004e8 <populate_xfer_buffer+0x18>
				}
			}
		}
	}
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000900 	.word	0x20000900
 800059c:	20000500 	.word	0x20000500

080005a0 <populate_digit>:

void populate_digit(uint8_t number)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
	uint8_t *num_buf = digits[number];
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <populate_digit+0x80>)
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	60bb      	str	r3, [r7, #8]

	for (uint8_t row = 0; row < 64; row++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	73bb      	strb	r3, [r7, #14]
 80005bc:	e026      	b.n	800060c <populate_digit+0x6c>
	{
		for (uint8_t col = 0; col < 16; col++)
 80005be:	2300      	movs	r3, #0
 80005c0:	737b      	strb	r3, [r7, #13]
 80005c2:	e01d      	b.n	8000600 <populate_digit+0x60>
		{
			if ((col < 3) && (row < 32))
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d810      	bhi.n	80005ec <populate_digit+0x4c>
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	2b1f      	cmp	r3, #31
 80005ce:	d80d      	bhi.n	80005ec <populate_digit+0x4c>
			{
				led_data_buf[(row * LED_NUM_COLS) + col] = *(num_buf + idx);
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	441a      	add	r2, r3
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	0119      	lsls	r1, r3, #4
 80005da:	7b7b      	ldrb	r3, [r7, #13]
 80005dc:	440b      	add	r3, r1
 80005de:	7811      	ldrb	r1, [r2, #0]
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <populate_digit+0x84>)
 80005e2:	54d1      	strb	r1, [r2, r3]
				idx++;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	3301      	adds	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e006      	b.n	80005fa <populate_digit+0x5a>
			}
			else
			{
				led_data_buf[(row * LED_NUM_COLS) + col] = 0x00;
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	011a      	lsls	r2, r3, #4
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <populate_digit+0x84>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t col = 0; col < 16; col++)
 80005fa:	7b7b      	ldrb	r3, [r7, #13]
 80005fc:	3301      	adds	r3, #1
 80005fe:	737b      	strb	r3, [r7, #13]
 8000600:	7b7b      	ldrb	r3, [r7, #13]
 8000602:	2b0f      	cmp	r3, #15
 8000604:	d9de      	bls.n	80005c4 <populate_digit+0x24>
	for (uint8_t row = 0; row < 64; row++)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	3301      	adds	r3, #1
 800060a:	73bb      	strb	r3, [r7, #14]
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	2b3f      	cmp	r3, #63	; 0x3f
 8000610:	d9d5      	bls.n	80005be <populate_digit+0x1e>
			}
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	200003c0 	.word	0x200003c0
 8000624:	20000500 	.word	0x20000500

08000628 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <led_init>:

void led_init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2108      	movs	r1, #8
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <led_init+0x28>)
 8000646:	f001 f8b9 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &led_cmd_init_buf[0], LED_CMD_INIT_BUF_SIZE, 100);
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	220e      	movs	r2, #14
 800064e:	4906      	ldr	r1, [pc, #24]	; (8000668 <led_init+0x2c>)
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <led_init+0x30>)
 8000652:	f001 fdad 	bl	80021b0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2108      	movs	r1, #8
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <led_init+0x28>)
 800065c:	f001 f8ae 	bl	80017bc <HAL_GPIO_WritePin>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020000 	.word	0x40020000
 8000668:	200003e8 	.word	0x200003e8
 800066c:	20000420 	.word	0x20000420

08000670 <led_set_page_addr>:

void led_set_page_addr(uint8_t pageNumber)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[3] =
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000680:	b2db      	uxtb	r3, r3
 8000682:	733b      	strb	r3, [r7, #12]
 8000684:	2310      	movs	r3, #16
 8000686:	737b      	strb	r3, [r7, #13]
 8000688:	2300      	movs	r3, #0
 800068a:	73bb      	strb	r3, [r7, #14]
		LED_CMD_COL_ADDR_START_MSB | 0x00,
		LED_CMD_COL_ADDR_START_LSB | 0x00

	};

	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <led_set_page_addr+0x48>)
 8000692:	f001 f893 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd[0], 3, 10);
 8000696:	f107 010c 	add.w	r1, r7, #12
 800069a:	230a      	movs	r3, #10
 800069c:	2203      	movs	r2, #3
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <led_set_page_addr+0x4c>)
 80006a0:	f001 fd86 	bl	80021b0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2108      	movs	r1, #8
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <led_set_page_addr+0x48>)
 80006aa:	f001 f887 	bl	80017bc <HAL_GPIO_WritePin>
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40020000 	.word	0x40020000
 80006bc:	20000420 	.word	0x20000420

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fa63 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f84f 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f903 	bl	80008d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 f8e1 	bl	8000898 <MX_DMA_Init>
  MX_SPI1_Init();
 80006d6:	f000 f8a9 	bl	800082c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2104      	movs	r1, #4
 80006de:	481f      	ldr	r0, [pc, #124]	; (800075c <main+0x9c>)
 80006e0:	f001 f86c 	bl	80017bc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fac5 	bl	8000c74 <HAL_Delay>
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2104      	movs	r1, #4
 80006ee:	481b      	ldr	r0, [pc, #108]	; (800075c <main+0x9c>)
 80006f0:	f001 f864 	bl	80017bc <HAL_GPIO_WritePin>

  led_init();
 80006f4:	f7ff ffa2 	bl	800063c <led_init>

  for (uint8_t j = 0; j < 10; j++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	e029      	b.n	8000752 <main+0x92>
  {
	memset((void *)&led_data_buf[0], 0, sizeof(led_data_buf));
 80006fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000702:	2100      	movs	r1, #0
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <main+0xa0>)
 8000706:	f001 ffb9 	bl	800267c <memset>
	populate_digit(j);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff47 	bl	80005a0 <populate_digit>
	populate_xfer_buffer();
 8000712:	f7ff fedd 	bl	80004d0 <populate_xfer_buffer>
	/* USER CODE END WHILE */
	for (int i = 0; i < 8; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	e010      	b.n	800073e <main+0x7e>
	{
	  led_set_page_addr(i);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ffa5 	bl	8000670 <led_set_page_addr>
	  HAL_SPI_Transmit(&hspi1, &led_transfer_buf[i * 128], 128, 100);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	01db      	lsls	r3, r3, #7
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <main+0xa4>)
 800072c:	1899      	adds	r1, r3, r2
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <main+0xa8>)
 8000734:	f001 fd3c 	bl	80021b0 <HAL_SPI_Transmit>
	for (int i = 0; i < 8; i++)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b07      	cmp	r3, #7
 8000742:	ddeb      	ble.n	800071c <main+0x5c>
	}
	HAL_Delay(1000);
 8000744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000748:	f000 fa94 	bl	8000c74 <HAL_Delay>
  for (uint8_t j = 0; j < 10; j++)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	3301      	adds	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b09      	cmp	r3, #9
 8000756:	d9d2      	bls.n	80006fe <main+0x3e>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x98>
 800075a:	bf00      	nop
 800075c:	40020000 	.word	0x40020000
 8000760:	20000500 	.word	0x20000500
 8000764:	20000900 	.word	0x20000900
 8000768:	20000420 	.word	0x20000420

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 ff7e 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <SystemClock_Config+0xb8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <SystemClock_Config+0xb8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemClock_Config+0xb8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <SystemClock_Config+0xbc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <SystemClock_Config+0xbc>)
 80007ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <SystemClock_Config+0xbc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 f805 	bl	80017f0 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007ec:	f000 f8b8 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fa68 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000816:	f000 f8a3 	bl	8000960 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_SPI1_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <MX_SPI1_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800083c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI1_Init+0x64>)
 8000858:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800085c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI1_Init+0x64>)
 8000878:	220a      	movs	r2, #10
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_SPI1_Init+0x64>)
 800087e:	f001 fbdb 	bl	8002038 <HAL_SPI_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000888:	f000 f86a 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000420 	.word	0x20000420
 8000894:	40013000 	.word	0x40013000

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	203b      	movs	r0, #59	; 0x3b
 80008c0:	f000 fad7 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c4:	203b      	movs	r0, #59	; 0x3b
 80008c6:	f000 faf0 	bl	8000eaa <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_GPIO_Init+0x80>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_GPIO_Init+0x80>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_GPIO_Init+0x80>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2104      	movs	r1, #4
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0x84>)
 800090e:	f000 ff55 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2108      	movs	r1, #8
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_GPIO_Init+0x84>)
 8000918:	f000 ff50 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Reset_Pin */
  GPIO_InitStruct.Pin = Reset_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000924:	2301      	movs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <MX_GPIO_Init+0x84>)
 8000932:	f000 fdbf 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_Pin */
  GPIO_InitStruct.Pin = A0_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x84>)
 800094c:	f000 fdb2 	bl	80014b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a30      	ldr	r2, [pc, #192]	; (8000a9c <HAL_SPI_MspInit+0xe0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d159      	bne.n	8000a92 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a2e      	ldr	r2, [pc, #184]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 80009e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <HAL_SPI_MspInit+0xe4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a16:	23f0      	movs	r3, #240	; 0xf0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a26:	2305      	movs	r3, #5
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <HAL_SPI_MspInit+0xe8>)
 8000a32:	f000 fd3f 	bl	80014b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_SPI_MspInit+0xf0>)
 8000a3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a46:	2240      	movs	r2, #64	; 0x40
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a78:	f000 fa32 	bl	8000ee0 <HAL_DMA_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000a82:	f7ff ff6d 	bl	8000960 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a8a:	649a      	str	r2, [r3, #72]	; 0x48
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_SPI_MspInit+0xec>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200004a0 	.word	0x200004a0
 8000aac:	40026458 	.word	0x40026458

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f89a 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA2_Stream3_IRQHandler+0x10>)
 8000b0a:	f000 fa97 	bl	800103c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200004a0 	.word	0x200004a0

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f001 fd8f 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fda7 	bl	80006c0 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8000b80:	08002714 	.word	0x08002714
  ldr r2, =_sbss
 8000b84:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8000b88:	20000d04 	.word	0x20000d04

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f94f 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fed2 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f967 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f92f 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200003f8 	.word	0x200003f8
 8000c2c:	20000400 	.word	0x20000400
 8000c30:	200003fc 	.word	0x200003fc

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000400 	.word	0x20000400
 8000c58:	20000d00 	.word	0x20000d00

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000d00 	.word	0x20000d00

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000400 	.word	0x20000400

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff feb6 	bl	8000c5c <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e099      	b.n	8001030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2202      	movs	r2, #2
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1c:	e00f      	b.n	8000f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1e:	f7ff fe9d 	bl	8000c5c <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d908      	bls.n	8000f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e078      	b.n	8001030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e8      	bne.n	8000f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_DMA_Init+0x158>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d107      	bne.n	8000fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f023 0307 	bic.w	r3, r3, #7
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d117      	bne.n	8001002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00e      	beq.n	8001002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9e9 	bl	80013bc <DMA_CheckFifoParam>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000ffe:	2301      	movs	r3, #1
 8001000:	e016      	b.n	8001030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f9a0 	bl	8001350 <DMA_CalcBaseAndBitshift>
 8001010:	4603      	mov	r3, r0
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001018:	223f      	movs	r2, #63	; 0x3f
 800101a:	409a      	lsls	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	f010803f 	.word	0xf010803f

0800103c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001048:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <HAL_DMA_IRQHandler+0x248>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a8e      	ldr	r2, [pc, #568]	; (8001288 <HAL_DMA_IRQHandler+0x24c>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0a9b      	lsrs	r3, r3, #10
 8001054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001066:	2208      	movs	r2, #8
 8001068:	409a      	lsls	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01a      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0204 	bic.w	r2, r2, #4
 800108e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	2208      	movs	r2, #8
 8001096:	409a      	lsls	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2201      	movs	r2, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d012      	beq.n	80010de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00b      	beq.n	80010de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ca:	2201      	movs	r2, #1
 80010cc:	409a      	lsls	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	f043 0202 	orr.w	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2204      	movs	r2, #4
 80010e4:	409a      	lsls	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d012      	beq.n	8001114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001100:	2204      	movs	r2, #4
 8001102:	409a      	lsls	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	f043 0204 	orr.w	r2, r3, #4
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	2210      	movs	r2, #16
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d043      	beq.n	80011ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d03c      	beq.n	80011ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2210      	movs	r2, #16
 8001138:	409a      	lsls	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d018      	beq.n	800117e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d024      	beq.n	80011ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	4798      	blx	r3
 800116a:	e01f      	b.n	80011ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01b      	beq.n	80011ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	4798      	blx	r3
 800117c:	e016      	b.n	80011ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d107      	bne.n	800119c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0208 	bic.w	r2, r2, #8
 800119a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	2220      	movs	r2, #32
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 808f 	beq.w	80012dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 8087 	beq.w	80012dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d2:	2220      	movs	r2, #32
 80011d4:	409a      	lsls	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d136      	bne.n	8001254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0216 	bic.w	r2, r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_DMA_IRQHandler+0x1da>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	223f      	movs	r2, #63	; 0x3f
 800122c:	409a      	lsls	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	2b00      	cmp	r3, #0
 8001248:	d07e      	beq.n	8001348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	4798      	blx	r3
        }
        return;
 8001252:	e079      	b.n	8001348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d01d      	beq.n	800129e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10d      	bne.n	800128c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	2b00      	cmp	r3, #0
 8001276:	d031      	beq.n	80012dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	4798      	blx	r3
 8001280:	e02c      	b.n	80012dc <HAL_DMA_IRQHandler+0x2a0>
 8001282:	bf00      	nop
 8001284:	200003f8 	.word	0x200003f8
 8001288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e01e      	b.n	80012dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10f      	bne.n	80012cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0210 	bic.w	r2, r2, #16
 80012ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d032      	beq.n	800134a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d022      	beq.n	8001336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2205      	movs	r2, #5
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	3301      	adds	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	d307      	bcc.n	8001324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <HAL_DMA_IRQHandler+0x2cc>
 8001322:	e000      	b.n	8001326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
 8001346:	e000      	b.n	800134a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001348:	bf00      	nop
    }
  }
}
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3b10      	subs	r3, #16
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <DMA_CalcBaseAndBitshift+0x68>)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d909      	bls.n	8001392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001386:	f023 0303 	bic.w	r3, r3, #3
 800138a:	1d1a      	adds	r2, r3, #4
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	659a      	str	r2, [r3, #88]	; 0x58
 8001390:	e007      	b.n	80013a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	aaaaaaab 	.word	0xaaaaaaab
 80013b8:	080026fc 	.word	0x080026fc

080013bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11f      	bne.n	8001416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d856      	bhi.n	800148a <DMA_CheckFifoParam+0xce>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <DMA_CheckFifoParam+0x28>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	08001407 	.word	0x08001407
 80013ec:	080013f5 	.word	0x080013f5
 80013f0:	0800148b 	.word	0x0800148b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d046      	beq.n	800148e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001404:	e043      	b.n	800148e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800140e:	d140      	bne.n	8001492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001414:	e03d      	b.n	8001492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141e:	d121      	bne.n	8001464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d837      	bhi.n	8001496 <DMA_CheckFifoParam+0xda>
 8001426:	a201      	add	r2, pc, #4	; (adr r2, 800142c <DMA_CheckFifoParam+0x70>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001443 	.word	0x08001443
 8001434:	0800143d 	.word	0x0800143d
 8001438:	08001455 	.word	0x08001455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
      break;
 8001440:	e030      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d025      	beq.n	800149a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001452:	e022      	b.n	800149a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800145c:	d11f      	bne.n	800149e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001462:	e01c      	b.n	800149e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d903      	bls.n	8001472 <DMA_CheckFifoParam+0xb6>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d003      	beq.n	8001478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001470:	e018      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
      break;
 8001476:	e015      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00e      	beq.n	80014a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
      break;
 8001488:	e00b      	b.n	80014a2 <DMA_CheckFifoParam+0xe6>
      break;
 800148a:	bf00      	nop
 800148c:	e00a      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;
 800148e:	bf00      	nop
 8001490:	e008      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001492:	bf00      	nop
 8001494:	e006      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001496:	bf00      	nop
 8001498:	e004      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;
 800149a:	bf00      	nop
 800149c:	e002      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800149e:	bf00      	nop
 80014a0:	e000      	b.n	80014a4 <DMA_CheckFifoParam+0xe8>
      break;
 80014a2:	bf00      	nop
    }
  } 
  
  return status; 
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e159      	b.n	8001784 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8148 	bne.w	800177e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d005      	beq.n	8001506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	2b02      	cmp	r3, #2
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a2 	beq.w	800177e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a56      	ldr	r2, [pc, #344]	; (800179c <HAL_GPIO_Init+0x2e8>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_GPIO_Init+0x2e8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <HAL_GPIO_Init+0x2f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x202>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_GPIO_Init+0x2f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x1fe>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_GPIO_Init+0x2f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x1fa>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_GPIO_Init+0x2fc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x1f6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <HAL_GPIO_Init+0x300>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x1f2>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b6:	2300      	movs	r3, #0
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	; (80017a0 <HAL_GPIO_Init+0x2ec>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_GPIO_Init+0x304>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_GPIO_Init+0x304>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_GPIO_Init+0x304>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_GPIO_Init+0x304>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f67f aea2 	bls.w	80014d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40013c00 	.word	0x40013c00

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e267      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d075      	beq.n	80018fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180e:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d00c      	beq.n	8001834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001822:	2b08      	cmp	r3, #8
 8001824:	d112      	bne.n	800184c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001832:	d10b      	bne.n	800184c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d05b      	beq.n	80018f8 <HAL_RCC_OscConfig+0x108>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d157      	bne.n	80018f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e242      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x74>
 8001856:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a75      	ldr	r2, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0xb0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a6c      	ldr	r2, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0xb0>
 8001888:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a68      	ldr	r2, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f9d8 	bl	8000c5c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f9d4 	bl	8000c5c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e207      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0xc0>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f9c4 	bl	8000c5c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f9c0 	bl	8000c5c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1f3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0xe8>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d063      	beq.n	80019ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800191a:	2b08      	cmp	r3, #8
 800191c:	d11c      	bne.n	8001958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191e:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_RCC_OscConfig+0x152>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1c7      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	e03a      	b.n	80019ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x244>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f979 	bl	8000c5c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff f975 	bl	8000c5c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1a8      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4925      	ldr	r1, [pc, #148]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x244>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f958 	bl	8000c5c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff f954 	bl	8000c5c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e187      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x248>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f938 	bl	8000c5c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff f934 	bl	8000c5c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e167      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x200>
 8001a0e:	e01b      	b.n	8001a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x248>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f921 	bl	8000c5c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	e00e      	b.n	8001a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f91d 	bl	8000c5c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d907      	bls.n	8001a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e150      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	42470000 	.word	0x42470000
 8001a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ea      	bne.n	8001a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8097 	beq.w	8001b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a7c      	ldr	r2, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a92:	4b74      	ldr	r3, [pc, #464]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a73      	ldr	r2, [pc, #460]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f8dd 	bl	8000c5c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa6:	f7ff f8d9 	bl	8000c5c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e10c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x2ea>
 8001acc:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x324>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x30c>
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5e      	ldr	r2, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a5b      	ldr	r2, [pc, #364]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0x324>
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f89e 	bl	8000c5c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f89a 	bl	8000c5c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0cb      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0ee      	beq.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f888 	bl	8000c5c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff f884 	bl	8000c5c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0b5      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80a1 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d05c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d141      	bne.n	8001c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f858 	bl	8000c5c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f854 	bl	8000c5c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e087      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	491b      	ldr	r1, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f82d 	bl	8000c5c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff f829 	bl	8000c5c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e05c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x416>
 8001c24:	e054      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f816 	bl	8000c5c <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f812 	bl	8000c5c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e045      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
 8001c52:	e03d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e038      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4ec>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d028      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d121      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d11a      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cc      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d90c      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d044      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d119      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e067      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4934      	ldr	r1, [pc, #208]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe ff44 	bl	8000c5c <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe ff40 	bl	8000c5c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20c      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fea4 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	080026ec 	.word	0x080026ec
 8001ea4:	200003f8 	.word	0x200003f8
 8001ea8:	200003fc 	.word	0x200003fc

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb0:	b090      	sub	sp, #64	; 0x40
 8001eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d00d      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x40>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	f200 80a1 	bhi.w	8002018 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ede:	e09b      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ee4:	e09b      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eea:	e098      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eec:	4b4f      	ldr	r3, [pc, #316]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef6:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d028      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	2200      	movs	r2, #0
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f14:	2100      	movs	r1, #0
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f18:	fb03 f201 	mul.w	r2, r3, r1
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	fb00 f303 	mul.w	r3, r0, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	4a43      	ldr	r2, [pc, #268]	; (8002034 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f26:	fba0 1202 	umull	r1, r2, r0, r2
 8001f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f32:	4413      	add	r3, r2
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	2200      	movs	r2, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	61fa      	str	r2, [r7, #28]
 8001f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f46:	f7fe f945 	bl	80001d4 <__aeabi_uldivmod>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f52:	e053      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	617a      	str	r2, [r7, #20]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f66:	f04f 0b00 	mov.w	fp, #0
 8001f6a:	4652      	mov	r2, sl
 8001f6c:	465b      	mov	r3, fp
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0159      	lsls	r1, r3, #5
 8001f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7c:	0150      	lsls	r0, r2, #5
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	ebb2 080a 	subs.w	r8, r2, sl
 8001f86:	eb63 090b 	sbc.w	r9, r3, fp
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f9e:	ebb2 0408 	subs.w	r4, r2, r8
 8001fa2:	eb63 0509 	sbc.w	r5, r3, r9
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	00eb      	lsls	r3, r5, #3
 8001fb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb4:	00e2      	lsls	r2, r4, #3
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	eb14 030a 	adds.w	r3, r4, sl
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	eb45 030b 	adc.w	r3, r5, fp
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	028b      	lsls	r3, r1, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fdc:	4621      	mov	r1, r4
 8001fde:	028a      	lsls	r2, r1, #10
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	60fa      	str	r2, [r7, #12]
 8001fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff0:	f7fe f8f0 	bl	80001d4 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800200c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetSysClockFreq+0x184>)
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002020:	4618      	mov	r0, r3
 8002022:	3740      	adds	r7, #64	; 0x40
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	017d7840 	.word	0x017d7840

08002038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e09b      	b.n	8002182 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d108      	bne.n	8002064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800205a:	d009      	beq.n	8002070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
 8002062:	e005      	b.n	8002070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d126      	bne.n	80020d0 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a3f      	ldr	r2, [pc, #252]	; (800218c <HAL_SPI_Init+0x154>)
 800208e:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_SPI_Init+0x158>)
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_SPI_Init+0x15c>)
 800209a:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <HAL_SPI_Init+0x160>)
 80020a0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a3d      	ldr	r2, [pc, #244]	; (800219c <HAL_SPI_Init+0x164>)
 80020a6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3d      	ldr	r2, [pc, #244]	; (80021a0 <HAL_SPI_Init+0x168>)
 80020ac:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_SPI_Init+0x16c>)
 80020b2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	; (80021a8 <HAL_SPI_Init+0x170>)
 80020b8:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a39      	ldr	r2, [pc, #228]	; (80021ac <HAL_SPI_Init+0x174>)
 80020c6:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	ea42 0103 	orr.w	r1, r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f003 0104 	and.w	r1, r3, #4
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	f003 0210 	and.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	08000629 	.word	0x08000629
 8002190:	08002437 	.word	0x08002437
 8002194:	0800244b 	.word	0x0800244b
 8002198:	0800245f 	.word	0x0800245f
 800219c:	08002473 	.word	0x08002473
 80021a0:	08002487 	.word	0x08002487
 80021a4:	0800249b 	.word	0x0800249b
 80021a8:	080024af 	.word	0x080024af
 80021ac:	080009bd 	.word	0x080009bd

080021b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_SPI_Transmit+0x22>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e12d      	b.n	800242e <HAL_SPI_Transmit+0x27e>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021da:	f7fe fd3f 	bl	8000c5c <HAL_GetTick>
 80021de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d002      	beq.n	80021f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
 80021f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021f4:	e116      	b.n	8002424 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_SPI_Transmit+0x52>
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002206:	e10d      	b.n	8002424 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800224e:	d10f      	bne.n	8002270 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d007      	beq.n	800228e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002296:	d14f      	bne.n	8002338 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Transmit+0xf6>
 80022a0:	8afb      	ldrh	r3, [r7, #22]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d142      	bne.n	800232c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	1c9a      	adds	r2, r3, #2
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ca:	e02f      	b.n	800232c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d112      	bne.n	8002300 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	1c9a      	adds	r2, r3, #2
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80022fe:	e015      	b.n	800232c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002300:	f7fe fcac 	bl	8000c5c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d803      	bhi.n	8002318 <HAL_SPI_Transmit+0x168>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x16e>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800232a:	e07b      	b.n	8002424 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ca      	bne.n	80022cc <HAL_SPI_Transmit+0x11c>
 8002336:	e050      	b.n	80023da <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_SPI_Transmit+0x196>
 8002340:	8afb      	ldrh	r3, [r7, #22]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d144      	bne.n	80023d0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800236c:	e030      	b.n	80023d0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d113      	bne.n	80023a4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80023a2:	e015      	b.n	80023d0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a4:	f7fe fc5a 	bl	8000c5c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d803      	bhi.n	80023bc <HAL_SPI_Transmit+0x20c>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d102      	bne.n	80023c2 <HAL_SPI_Transmit+0x212>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023ce:	e029      	b.n	8002424 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1c9      	bne.n	800236e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f8f8 	bl	80025d4 <SPI_EndRxTxTransaction>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	e003      	b.n	8002424 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800242c:	7ffb      	ldrb	r3, [r7, #31]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024d4:	f7fe fbc2 	bl	8000c5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024e4:	f7fe fbba 	bl	8000c5c <HAL_GetTick>
 80024e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	015b      	lsls	r3, r3, #5
 80024f0:	0d1b      	lsrs	r3, r3, #20
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fa:	e054      	b.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d050      	beq.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002504:	f7fe fbaa 	bl	8000c5c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	d902      	bls.n	800251a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d13d      	bne.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d111      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253c:	d004      	beq.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d107      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d10f      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e017      	b.n	80025c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d19b      	bne.n	80024fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003f8 	.word	0x200003f8

080025d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2201      	movs	r2, #1
 80025e8:	2102      	movs	r1, #2
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff6a 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e032      	b.n	800266c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <SPI_EndRxTxTransaction+0xa0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <SPI_EndRxTxTransaction+0xa4>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0d5b      	lsrs	r3, r3, #21
 8002612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002624:	d112      	bne.n	800264c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff47 	bl	80024c4 <SPI_WaitFlagStateUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e00f      	b.n	800266c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3b01      	subs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d0f2      	beq.n	800264c <SPI_EndRxTxTransaction+0x78>
 8002666:	e000      	b.n	800266a <SPI_EndRxTxTransaction+0x96>
        break;
 8002668:	bf00      	nop
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200003f8 	.word	0x200003f8
 8002678:	165e9f81 	.word	0x165e9f81

0800267c <memset>:
 800267c:	4402      	add	r2, r0
 800267e:	4603      	mov	r3, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	4d0d      	ldr	r5, [pc, #52]	; (80026c4 <__libc_init_array+0x38>)
 8002690:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002692:	1b64      	subs	r4, r4, r5
 8002694:	10a4      	asrs	r4, r4, #2
 8002696:	2600      	movs	r6, #0
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	4d0b      	ldr	r5, [pc, #44]	; (80026cc <__libc_init_array+0x40>)
 800269e:	4c0c      	ldr	r4, [pc, #48]	; (80026d0 <__libc_init_array+0x44>)
 80026a0:	f000 f818 	bl	80026d4 <_init>
 80026a4:	1b64      	subs	r4, r4, r5
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	2600      	movs	r6, #0
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	0800270c 	.word	0x0800270c
 80026c8:	0800270c 	.word	0x0800270c
 80026cc:	0800270c 	.word	0x0800270c
 80026d0:	08002710 	.word	0x08002710

080026d4 <_init>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr

080026e0 <_fini>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr
